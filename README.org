Copyright (C) 2022 Xavier Ruiz

See the end of the file for license conditions.

#+BEGIN_COMMENT
This file is best viewed in Emacs!
#+END_COMMENT

* Tabby
** About
Ever wanted a pet in your tab bar?  Well, with the power of SVGs and tab-bar-mode magic, now you can!
Choose from a variety of "pets".

This package requires Emacs 28 or higher, for the tab-bar-mode.

In the future, there will be more pets added, but adding your own pet is also easy!
Please see [[file:tabby.el][tabby-cat.el]] for an example of how to make a pet.

Here is a demo of tabby using GIF's in the Tab bar.
[[file:images/output.gif]]

** Inspiration
This package aims to replicate the "Corgi Mode" from Google Colab:
#+DOWNLOADED: screenshot @ 2022-02-23 16:31:13
[[file:images/20220223-163113_screenshot.png]]

These Corgis trot across the top bar. The closest, editable analogue of this is Emacs' tab bar.

I also noticed other editors such as the JOE editor can be modified to have a small Mario in the top bar shown in Bisqwit's video: https://www.youtube.com/watch?v=ZMBQmhO8KqI. But we don't want to use [[https://github.com/bisqwit/that_editor][that editor]]!

Per the Corgi Mode in Colab, we can see that they have 4 animation frames and use GIFs to animate:
#+DOWNLOADED: screenshot @ 2022-02-28 15:06:58
[[file:images/20220228-150658_screenshot.png]]

As you can see, frames two and four are identical. The animation frames can described as follows:
1) left forward strut
2) neutral position
3) right forward strut
4) neutral (again)


Therefore, to create our own pet, we only need three distinct frames!

I have gotten GIF's "working" in the tab-bar. Unfortunately, the timer function for GIF's in Emacs does not always replace the last GIF and instead pastes on top:

#+DOWNLOADED: screenshot @ 2022-02-28 15:10:54
[[file:images/20220228-151054_screenshot.png]]

This won't do, so I think I will be going for some custom animation function for now rather than messing with the default GIF animation. This also has the advantage that user's don't need to create a GIF, but can instead supply three images that we animate between.

Actually... maybe GIF is okay. I figured out how to make my own timing function. You just have to modify all the GIFs you use to have an extra frame. I found that everytime we set the animation to the last frame, it always has artifacts and decides to show the first frame as well. I am not sure why this is happening. But adding an extra frame fixes everything.


If you are just converting one image:
#+begin_src shell
  convert "dancing-kirby.gif[0]" first-frame.gif
  convert dancing-kirby.gif first-frame.gif dancing-kirby-fixed.gif
#+end_src

The file ~dancing-kirby-fixed.gif~ is the same GIF, just with the first frame appended to the end of the GIF.

My animation function simply skips the last frame when animating. Also, if you try to use the default GIF's animation, it attempts to save resources by only animating if you are in the GIF's current buffer. This is not very helpful for us since the tab bar is not one single buffer. You will find yourself having to write buffer change hooks to restart the animation.

If you want to append an extra frame to every GIF in a directory, please use this script:
#+begin_src shell :tangle fileconvert.sh
  #!/bin/sh
  rm -f *.frame0.gif *.fixed.gif

  for file in *; do
      if [ -f "$file" ]; then 
          convert "$file[0]" "$file.frame0.gif"
          convert $file "$file.frame0.gif" "$file.fixed.gif"
      fi
  done

  rm -f *.frame0.gif
#+end_src


Running ~identify chocolatechip.gif chocolatechip.gif.fixed.gif~ will show the number of frames for each GIF. The latter should be +1 of the original.

It looks like Emacs does not support image transformations like flopping. Here is a quick script that can do that:
#+begin_src shell :tangle flopimages.sh
  #!/bin/sh

  for file in *; do
      if [ -f "$file" ]; then 
          convert $file +flop "$file.flopped.gif"
      fi
  done
#+end_src


I have provided some sample images, fixed images along with fixed-flopped images in this repository, please see the ~animations~ directory. 



Emacs default supports xpm but I think this package will try to use SVGs or PNGs only.










** How it Works
IDK if I will get this project to work. For now it is just an experiment.
My basic plan is to:
1. Get SVG's working.
2. Position SVG's properly
3. Create SVG sprites and make some type of modular sprite system
4. Create sprites for cat, dog, and robot
5. Add clickable actions to the pets (such as sitting or feeding!)
6. Make the pet show random tips, just like Clippy!
7. Add functionality so pets can also appear in the modeline


** License
This file is not currently part of GNU Emacs.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.





#+STARTUP: showall
#+AUTHOR: Xavier Ruiz
#+EMAIL: xruizify@gmail.com
